cmake_minimum_required(VERSION 2.6)
project(fivehundred)

# Package description and copyright
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Five Hundred is a card game")
set(CPACK_PACKAGE_VENDOR "Oliver Giles")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")

# Grab required libraries
find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)
link_directories(${QT_LIBRARY_DIR})
find_package(Lua51 REQUIRED)

# Generate C++ from Qt objects
qt4_wrap_cpp(MOCS biddialog.hpp bidgrid.hpp bubble.hpp card.hpp contract.hpp game.hpp human.hpp mainwindow.hpp player.hpp scorechart.hpp newgamedialog.hpp setupplayer.hpp table.hpp)
qt4_wrap_ui(UI_OUTPUT biddialog.ui mainwindow.ui scorechart.ui newgamedialog.ui setupplayer.ui)

# Include Qt dirs and current binary dir (location of autogenerated c++)
include_directories(${QT_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${LUA_INCLUDE_DIR})

# Define the executable
set(CMAKE_CXX_FLAGS "-g --std=c++0x -Wall -Wextra -Werror")
list(APPEND FIVEHUNDRED_SOURCES
    ${UI_OUTPUT} ${MOCS} bid.cpp biddialog.cpp bidding.cpp bidgrid.cpp bubble.cpp card.cpp
    computer.cpp contract.cpp deck.cpp game.cpp human.cpp log.cpp
    mainwindow.cpp newgamedialog.cpp os.cpp player.cpp scorechart.cpp
    setupplayer.cpp suit.cpp table.cpp trick.cpp version.h)

file(GLOB GFX_FILES gfx/*.gif gfx/*.png)
file(GLOB AI_FILES scripts/*.lua)

# Package Version
find_package(Subversion REQUIRED)
Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} SVN)
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "1")
set(CPACK_PACKAGE_VERSION_PATCH "0alpha~r${SVN_WC_REVISION}")
set(VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/version.h.txt" "#define VERSION \"${VERSION}\"")
add_custom_command(OUTPUT version.h COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/version.h.txt version.h)

add_executable(fivehundred MACOSX_BUNDLE main.cpp version.h ${FIVEHUNDRED_SOURCES} ${GFX_FILES} ${AI_FILES})

# Installing and packaging
if(WIN32)
	set(EXTRA_LIBS "QtCore;QtGui;imm32;wsock32")
	include("package/win32.cmake")
elseif(APPLE)
	set(EXTRA_LIBS "z")
	set_target_properties(fivehundred PROPERTIES MACOSX_BUNDLE TRUE LINK_FLAGS "-framework CoreFoundation -framework Cocoa -framework Carbon")
	include("package/osx.cmake")
elseif(LINUX)
	include("package/linux.cmake")
endif()

# Doxygen documentation
find_package(Doxygen)
if(DOXYGEN_FOUND)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
    add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)

include(CPack)


target_link_libraries(
	fivehundred
	${QT_QTCORE_LIBRARY}
	${QT_QTGUI_LIBRARY}
	${EXTRA_LIBS}
	${LUA_LIBRARIES}
)

# Add tests
find_package(GTest)
    add_library(500 ${FIVEHUNDRED_SOURCES})
    add_subdirectory(test)
