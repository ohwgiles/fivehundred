cmake_minimum_required(VERSION 2.6)
project(fivehundred)

# Package description and copyright
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Five Hundred is a card game")
set(CPACK_PACKAGE_VENDOR "Oliver Giles")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")

# Grab required libraries
find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)
find_package(Lua51 REQUIRED)

# Generate C++ from Qt objects
qt4_wrap_cpp(MOCS card.hpp game.hpp biddialog.hpp contract.hpp human.hpp mainwindow.hpp player.hpp scorechart.hpp newgamedialog.hpp setupplayer.hpp)
qt4_wrap_ui(UI_OUTPUT biddialog.ui mainwindow.ui scorechart.ui newgamedialog.ui setupplayer.ui)

# Include Qt dirs and current binary dir (location of autogenerated c++)
include_directories(${QT_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${LUA_INCLUDE_DIR})

# Define the executable
add_definitions(--std=c++0x -Wall -Wextra -Werror)
add_executable(fivehundred
		${UI_OUTPUT}
		${MOCS}
		bid.cpp
		biddialog.cpp
		bidding.cpp
		card.cpp
		computer.cpp
		contract.cpp
		deck.cpp
		game.cpp
		human.cpp
		log.cpp
		main.cpp
		mainwindow.cpp
		newgamedialog.cpp
		os.cpp
		player.cpp
		scorechart.cpp
		setupplayer.cpp
		suit.cpp
		trick.cpp
		)
		
target_link_libraries(
	fivehundred
	${QT_QTCORE_LIBRARY}
	${QT_QTGUI_LIBRARY}
	${LUA_LIBRARIES}
)

# Package Version
find_package(Subversion REQUIRED)
Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} SVN)
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "1")
set(CPACK_PACKAGE_VERSION_PATCH "0alpha~r${SVN_WC_REVISION}")
set(VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/version.h.txt" "#define VERSION \"${VERSION}\"")
add_custom_command(OUTPUT version.h COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/version.h.txt version.h)
add_dependencies(fivehundred version.h)

# Doxygen documentation
find_package(Doxygen)
if(DOXYGEN_FOUND)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
	add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)

# Installing and packaging
if(WIN32 AND NOT UNIX)
	include("package/win32.cmake")
else()
	include("package/linux.cmake")
endif()
include(CPack)

# Add tests
enable_testing()
add_subdirectory(test)
